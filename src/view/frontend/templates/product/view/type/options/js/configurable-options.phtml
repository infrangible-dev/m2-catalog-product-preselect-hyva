<script>
    window.initConfigurableOptions = new Proxy(window.initConfigurableOptions, {
        apply(target, thisArg, argArray) {
            const instance = target.apply(thisArg, argArray);

            instance.init = new Proxy(instance.init, {
                apply(target, thisArg, argArray) {
                    target.apply(thisArg, argArray);

                    if (! this.prepared) {
                        var config = instance.optionConfig;

                        if (config.preselect.enable) {
                            const urlQueryParams = new URLSearchParams(window.location.search.replace('?',''));
                            const urlHashParams = new URLSearchParams(window.location.hash.replace('#',''));

                            if (urlQueryParams.size > 0 || urlHashParams.size > 0) {
                                var urlSelectedAttributes = {};

                                if (urlQueryParams.size > 0) {
                                    urlQueryParams.forEach(function (attributeOptionId, attributeCode) {
                                        urlSelectedAttributes[attributeCode] = attributeOptionId;
                                    });
                                } else if (urlHashParams.size > 0) {
                                    urlHashParams.forEach(function (attributeOptionId, attributeCode) {
                                        urlSelectedAttributes[attributeCode] = attributeOptionId;
                                    });
                                }

                                var foundCombination = false;

                                for (var i = 0; i < config.preselect.attributeCombinations.length; i++) {
                                    var attributeCombination = config.preselect.attributeCombinations[i];
                                    var useAttributeCombination = true;

                                    var j;
                                    var attributeCode;
                                    for (j = 0; j < attributeCombination.length; j++) {
                                        attributeCode = attributeCombination[j];
                                        if (! (attributeCode in urlSelectedAttributes)) {
                                            useAttributeCombination = false;
                                        }
                                    }

                                    if (useAttributeCombination) {
                                        var defaultValues = config.defaultValues;
                                        for (j = 0; j < attributeCombination.length; j++) {
                                            attributeCode = attributeCombination[j];
                                            if (attributeCode in defaultValues) {
                                                defaultValues = defaultValues[attributeCode];
                                            }
                                            if (attributeCode in urlSelectedAttributes) {
                                                var attributeValue = urlSelectedAttributes[attributeCode];
                                                if (attributeValue in defaultValues) {
                                                    defaultValues = defaultValues[attributeValue];
                                                }
                                            }
                                        }

                                        if (defaultValues.defaultValues) {
                                            config.defaultValues = defaultValues.defaultValues;
                                            foundCombination = true;
                                            break;
                                        }
                                    }
                                }

                                if (! foundCombination) {
                                    config.defaultValues = config.defaultValues.all.defaultValues;
                                }
                            } else {
                                config.defaultValues = config.defaultValues.all.defaultValues;
                            }
                        }

                        this.prepared = true;
                    }
                }
            });

            return instance;
        }
    })
</script>
